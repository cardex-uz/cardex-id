// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/service/sso.proto

package sso

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SSO_ValidateUsername_FullMethodName = "/sso.SSO/ValidateUsername"
	SSO_ValidatePhone_FullMethodName    = "/sso.SSO/ValidatePhone"
	SSO_ConfirmSubmit_FullMethodName    = "/sso.SSO/ConfirmSubmit"
	SSO_Confirm_FullMethodName          = "/sso.SSO/Confirm"
	SSO_FindAccounts_FullMethodName     = "/sso.SSO/FindAccounts"
	SSO_SignIn_FullMethodName           = "/sso.SSO/SignIn"
	SSO_SignUp_FullMethodName           = "/sso.SSO/SignUp"
	SSO_GetMe_FullMethodName            = "/sso.SSO/GetMe"
	SSO_SignOut_FullMethodName          = "/sso.SSO/SignOut"
)

// SSOClient is the client API for SSO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOClient interface {
	ValidateUsername(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ValidateUsernameReq, ValidateUsernameRes], error)
	ValidatePhone(ctx context.Context, in *ValidatePhoneReq, opts ...grpc.CallOption) (*ValidatePhoneRes, error)
	ConfirmSubmit(ctx context.Context, in *ConfirmSubmitReq, opts ...grpc.CallOption) (*ConfirmSubmitRes, error)
	Confirm(ctx context.Context, in *ConfirmReq, opts ...grpc.CallOption) (*ConfirmRes, error)
	FindAccounts(ctx context.Context, in *FindAccountsReq, opts ...grpc.CallOption) (*FindAccountsRes, error)
	SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error)
	SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error)
	GetMe(ctx context.Context, in *GetMeReq, opts ...grpc.CallOption) (*GetMeRes, error)
	SignOut(ctx context.Context, in *SignOutReq, opts ...grpc.CallOption) (*SignOutRes, error)
}

type sSOClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOClient(cc grpc.ClientConnInterface) SSOClient {
	return &sSOClient{cc}
}

func (c *sSOClient) ValidateUsername(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ValidateUsernameReq, ValidateUsernameRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SSO_ServiceDesc.Streams[0], SSO_ValidateUsername_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ValidateUsernameReq, ValidateUsernameRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SSO_ValidateUsernameClient = grpc.BidiStreamingClient[ValidateUsernameReq, ValidateUsernameRes]

func (c *sSOClient) ValidatePhone(ctx context.Context, in *ValidatePhoneReq, opts ...grpc.CallOption) (*ValidatePhoneRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatePhoneRes)
	err := c.cc.Invoke(ctx, SSO_ValidatePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) ConfirmSubmit(ctx context.Context, in *ConfirmSubmitReq, opts ...grpc.CallOption) (*ConfirmSubmitRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmSubmitRes)
	err := c.cc.Invoke(ctx, SSO_ConfirmSubmit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) Confirm(ctx context.Context, in *ConfirmReq, opts ...grpc.CallOption) (*ConfirmRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmRes)
	err := c.cc.Invoke(ctx, SSO_Confirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) FindAccounts(ctx context.Context, in *FindAccountsReq, opts ...grpc.CallOption) (*FindAccountsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAccountsRes)
	err := c.cc.Invoke(ctx, SSO_FindAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInRes)
	err := c.cc.Invoke(ctx, SSO_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpRes)
	err := c.cc.Invoke(ctx, SSO_SignUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) GetMe(ctx context.Context, in *GetMeReq, opts ...grpc.CallOption) (*GetMeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeRes)
	err := c.cc.Invoke(ctx, SSO_GetMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) SignOut(ctx context.Context, in *SignOutReq, opts ...grpc.CallOption) (*SignOutRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignOutRes)
	err := c.cc.Invoke(ctx, SSO_SignOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOServer is the server API for SSO service.
// All implementations must embed UnimplementedSSOServer
// for forward compatibility.
type SSOServer interface {
	ValidateUsername(grpc.BidiStreamingServer[ValidateUsernameReq, ValidateUsernameRes]) error
	ValidatePhone(context.Context, *ValidatePhoneReq) (*ValidatePhoneRes, error)
	ConfirmSubmit(context.Context, *ConfirmSubmitReq) (*ConfirmSubmitRes, error)
	Confirm(context.Context, *ConfirmReq) (*ConfirmRes, error)
	FindAccounts(context.Context, *FindAccountsReq) (*FindAccountsRes, error)
	SignIn(context.Context, *SignInReq) (*SignInRes, error)
	SignUp(context.Context, *SignUpReq) (*SignUpRes, error)
	GetMe(context.Context, *GetMeReq) (*GetMeRes, error)
	SignOut(context.Context, *SignOutReq) (*SignOutRes, error)
	mustEmbedUnimplementedSSOServer()
}

// UnimplementedSSOServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSSOServer struct{}

func (UnimplementedSSOServer) ValidateUsername(grpc.BidiStreamingServer[ValidateUsernameReq, ValidateUsernameRes]) error {
	return status.Errorf(codes.Unimplemented, "method ValidateUsername not implemented")
}
func (UnimplementedSSOServer) ValidatePhone(context.Context, *ValidatePhoneReq) (*ValidatePhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePhone not implemented")
}
func (UnimplementedSSOServer) ConfirmSubmit(context.Context, *ConfirmSubmitReq) (*ConfirmSubmitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmSubmit not implemented")
}
func (UnimplementedSSOServer) Confirm(context.Context, *ConfirmReq) (*ConfirmRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedSSOServer) FindAccounts(context.Context, *FindAccountsReq) (*FindAccountsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccounts not implemented")
}
func (UnimplementedSSOServer) SignIn(context.Context, *SignInReq) (*SignInRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedSSOServer) SignUp(context.Context, *SignUpReq) (*SignUpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedSSOServer) GetMe(context.Context, *GetMeReq) (*GetMeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedSSOServer) SignOut(context.Context, *SignOutReq) (*SignOutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedSSOServer) mustEmbedUnimplementedSSOServer() {}
func (UnimplementedSSOServer) testEmbeddedByValue()             {}

// UnsafeSSOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOServer will
// result in compilation errors.
type UnsafeSSOServer interface {
	mustEmbedUnimplementedSSOServer()
}

func RegisterSSOServer(s grpc.ServiceRegistrar, srv SSOServer) {
	// If the following call pancis, it indicates UnimplementedSSOServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SSO_ServiceDesc, srv)
}

func _SSO_ValidateUsername_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SSOServer).ValidateUsername(&grpc.GenericServerStream[ValidateUsernameReq, ValidateUsernameRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SSO_ValidateUsernameServer = grpc.BidiStreamingServer[ValidateUsernameReq, ValidateUsernameRes]

func _SSO_ValidatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).ValidatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_ValidatePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).ValidatePhone(ctx, req.(*ValidatePhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_ConfirmSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmSubmitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).ConfirmSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_ConfirmSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).ConfirmSubmit(ctx, req.(*ConfirmSubmitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_Confirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).Confirm(ctx, req.(*ConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_FindAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).FindAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_FindAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).FindAccounts(ctx, req.(*FindAccountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).SignIn(ctx, req.(*SignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).SignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_GetMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).GetMe(ctx, req.(*GetMeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_SignOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).SignOut(ctx, req.(*SignOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SSO_ServiceDesc is the grpc.ServiceDesc for SSO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.SSO",
	HandlerType: (*SSOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidatePhone",
			Handler:    _SSO_ValidatePhone_Handler,
		},
		{
			MethodName: "ConfirmSubmit",
			Handler:    _SSO_ConfirmSubmit_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _SSO_Confirm_Handler,
		},
		{
			MethodName: "FindAccounts",
			Handler:    _SSO_FindAccounts_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _SSO_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _SSO_SignUp_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _SSO_GetMe_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _SSO_SignOut_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ValidateUsername",
			Handler:       _SSO_ValidateUsername_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/service/sso.proto",
}
